(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{414:function(t,a,_){"use strict";_.r(a);var s=_(56),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git-与svn-比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-与svn-比较"}},[t._v("#")]),t._v(" Git 与SVN 比较")]),t._v(" "),_("h2",{attrs:{id:"_1-本地增加分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-本地增加分支"}},[t._v("#")]),t._v(" 1）本地增加分支")]),t._v(" "),_("p",[t._v("图中Git本地和服务器端结构都很灵活，所有版本都存储在一个目录中，你只需要进行分支的切换即可达到在某个分支工作的效果\n而SVN则完全不同，如果你需要在本地试验一些自己的代码，只能本地维护多个不同的拷贝，每个拷贝对应一个SVN服务器地址")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("举一个实际的例子：\n使用SVN作为版本控制工具，当正在试图增强一个模块，工作做到一半，由于会改变原模块的行为导致代码服务器上许多测试的失败，所以并没有提交代码。")]),t._v(" "),_("p",[t._v("这时候假如现在有一个很紧急的Bug需要处理， 必须在两个小时内完成。我只好将本地的所有修改diff，并输出成为一个patch文件，然后回滚有关当前任务的所有代码，再开始修改Bug的任务，等到修改好后，在将patch应用回来。前前后后要完成多个繁琐的步骤，这还不计中间代码发生冲突所要进行的工作量。")]),t._v(" "),_("p",[t._v("可是如果使用Git， 我们只需要开一个分支或者转回到主分支上，就可以随时开始Bug修改的任务，完成之后，只要切换到原来的分支就可以优雅的继续以前的任务。只要你愿意，每一个新的任务都可以开一个分支，完成后，再将它合并到主分支上，轻松而优雅。")])])]),t._v(" "),_("h2",{attrs:{id:"_2-分布式提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式提交"}},[t._v("#")]),t._v(" 2）分布式提交")]),t._v(" "),_("p",[t._v("Git 可以本地提交代码，所以在上面的图中，Git有利于将一个大任务分解，进行本地的多次提交\n而SVN只能在本地进行大量的一次性更改，导致将来合并到主干上造成巨大的风险")]),t._v(" "),_("h2",{attrs:{id:"_3-日志查看"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-日志查看"}},[t._v("#")]),t._v(" 3）日志查看")]),t._v(" "),_("p",[t._v("Git 的代码日志是在本地的，可以随时查看")]),t._v(" "),_("p",[t._v("SVN的日志在服务器上的，每次查看日志需要先从服务器上下载下来")]),t._v(" "),_("p",[t._v("例如：代码服务器在美国，当每次查看几年前所做的工作时，日志下载可能需要十分钟，这不能不说是一个痛苦。但是如果迁移到Git上，利用Git日志在本地的特性，查看某个具体任务的所有代码历史，每次只需要几秒钟，大大方便了工作，提高了效率。")]),t._v(" "),_("p",[t._v("当然分布式并不是说用了Git就不需要一个代码中心服务器，如果你工作在一个团队里，还是需要一个服务器来保存所有的代码的。")])])}),[],!1,null,null,null);a.default=v.exports}}]);