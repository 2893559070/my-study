(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{417:function(t,n,a){"use strict";a.r(n);var e=a(56),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[t._v("#")]),t._v(" Git 常用命令")]),t._v(" "),a("h2",{attrs:{id:"_1-远程仓库相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-远程仓库相关命令"}},[t._v("#")]),t._v(" 1) 远程仓库相关命令")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("检出仓库：        $ git clone git://github.com/jquery/jquery.git\n\n查看远程仓库：$ git remote -v\n\n添加远程仓库：$ git remote add [name] [url]\n\n删除远程仓库：$ git remote rm [name]\n\n修改远程仓库：$ git remote set-url --push [name] [newUrl]\n\n拉取远程仓库：$ git pull [remoteName] [localBranchName]\n\n推送远程仓库：$ git push [remoteName] [localBranchName]\n\n*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：\n\n$git push origin test:master         // 提交本地test分支作为远程的master分支\n\n$git push origin test:test              // 提交本地test分支作为远程的test分支\n")])])]),a("h2",{attrs:{id:"_2-分支-branch-操作相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分支-branch-操作相关命令"}},[t._v("#")]),t._v(" 2）分支(branch)操作相关命令")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("查看本地分支：$ git branch\n\n查看远程分支：$ git branch -r\n\n创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支\n\n切换分支：$ git checkout [name]\n\n创建新分支并立即切换到新分支：$ git checkout -b [name]\n\n删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n\n合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并\n\n当前分支与合并分支冲突：$ git stash 将冲突代码先缓存在合并\n\n创建远程分支(本地分支push到远程)：$ git push origin [name]\n\n删除远程分支：gitpushorigin:heads/[name]或 gitpush origin :[name] \n\n\n*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\n\n$git symbolic-ref HEAD refs/heads/[name]\n\n$rm .git/index\n\n$git clean -fdx\n")])])]),a("h2",{attrs:{id:"_3-版本-tag-操作相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-版本-tag-操作相关命令"}},[t._v("#")]),t._v(" 3）版本(tag)操作相关命令")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("查看版本：$ git tag\n\n创建版本：$ git tag [name]\n\n删除版本：$ git tag -d [name]\n\n查看远程版本：$ git tag -r\n\n创建远程版本(本地版本push到远程)：$ git push origin [name]\n\n删除远程版本：$ git push origin :refs/tags/[name]\n\n合并远程仓库的tag到本地：$ git pull origin --tags\n\n上传本地tag到远程仓库：$ git push origin --tags\n\n创建带注释的tag：$ git tag -a [name] -m 'yourMessage'\n")])])]),a("h2",{attrs:{id:"_4-子模块-submodule-相关操作命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-子模块-submodule-相关操作命令"}},[t._v("#")]),t._v(" 4) 子模块(submodule)相关操作命令")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("添加子模块：$ git submodule add [url] [path]\n\n如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs\n\n \n\n初始化子模块：$ git submodule init  ----只在首次检出仓库时运行一次就行\n\n更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下\n\n \n\n删除子模块：（分4步走哦）\n\n1) $ git rm --cached [path]\n\n2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉\n\n3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉\n\n4) 手动删除子模块残留的目录\n")])])]),a("h2",{attrs:{id:"_5-忽略一些文件、文件夹不提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-忽略一些文件、文件夹不提交"}},[t._v("#")]),t._v(" 5）忽略一些文件、文件夹不提交")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如\n\ntarget\n\nbin\n\n*.db\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);