(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{440:function(t,a,s){"use strict";s.r(a);var e=s(56),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"变量-修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量-修饰符"}},[t._v("#")]),t._v(" 变量 && 修饰符")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("type identifier "),s("span",{pre:!0,attrs:{class:"token url"}},[t._v("["),s("span",{pre:!0,attrs:{class:"token content"}},[t._v(" = value")]),t._v("]["),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(", identifier [= value")]),t._v("]")]),t._v(" ...] ;\n")])])]),s("p",[t._v("格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。")]),t._v(" "),s("h2",{attrs:{id:"变量类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[t._v("#")]),t._v(" 变量类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类变量（静态变量）：独立于方法之外的变量，用 static 修饰。")])]),t._v(" "),s("li",[s("p",[t._v("实例变量：独立于方法之外的变量，不过没有 static 修饰。")])]),t._v(" "),s("li",[s("p",[t._v("局部变量：类的方法中的变量。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Variable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" allClicks"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类变量（静态变量） 很少使用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 局部变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),s("p",[t._v("Java语言提供了很多修饰符，主要分为以下两类：")]),t._v(" "),s("ul",[s("li",[t._v("访问修饰符")]),t._v(" "),s("li",[t._v("非访问修饰符")])]),t._v(" "),s("h3",{attrs:{id:"访问控制修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问控制修饰符"}},[t._v("#")]),t._v(" 访问控制修饰符")]),t._v(" "),s("p",[t._v("Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("default")]),t._v(" (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。")]),t._v(" "),s("li",[s("strong",[t._v("private")]),t._v(" : 在同一类内可见。使用对象：变量、方法。 "),s("strong",[t._v("注意：不能修饰类（外部类）")])]),t._v(" "),s("li",[s("strong",[t._v("public")]),t._v(" : 对所有类可见。使用对象：类、接口、变量、方法")]),t._v(" "),s("li",[s("strong",[t._v("protected")]),t._v(" : 对同一包内的类和所有子类可见。使用对象：变量、方法。 "),s("strong",[t._v("注意：不能修饰类（外部类）")]),t._v("。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("修饰符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("当前类")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("同一包内")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("子孙类(同一包)")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("子孙类(不同包)")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("其他包")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("public")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("protected")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y/N")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("N")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("default")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("N")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("N")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("private")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Y")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("N")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("N")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("N")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("N")])])])]),t._v(" "),s("h3",{attrs:{id:"访问控制和继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问控制和继承"}},[t._v("#")]),t._v(" 访问控制和继承")]),t._v(" "),s("p",[t._v("请注意以下方法继承的规则：")]),t._v(" "),s("ul",[s("li",[t._v("父类中声明为 public 的方法在子类中也必须为 public。")]),t._v(" "),s("li",[t._v("父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。")]),t._v(" "),s("li",[t._v("父类中声明为 private 的方法，不能够被子类继承。")])]),t._v(" "),s("h3",{attrs:{id:"非访问修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非访问修饰符"}},[t._v("#")]),t._v(" 非访问修饰符")]),t._v(" "),s("p",[t._v("为了实现一些其他的功能，Java 也提供了许多非访问修饰符。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("static 修饰符，用来修饰类方法和类变量。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("静态变量：")]),t._v(" "),s("ul",[s("li",[t._v("static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。")])])]),t._v(" "),s("li",[s("strong",[t._v("静态方法：")]),t._v(" "),s("ul",[s("li",[t._v("static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。")])])])])]),t._v(" "),s("li",[s("p",[t._v("final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。 (一处改 处处用)")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("final 变量：")])]),t._v(" "),s("ul",[s("li",[t._v('final 表示"最后的、最终的"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。')]),t._v(" "),s("li",[t._v("final 修饰符通常和 static 修饰符一起使用来创建类常量。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("final 方法")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("父类中的 final 方法可以被子类继承，但是不能被子类重写。")])]),t._v(" "),s("li",[s("p",[t._v("声明 final 方法的主要目的是防止该方法的内容被修改。")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("final 类")])]),t._v(" "),s("ul",[s("li",[t._v("final 类不能被继承，没有类能够继承 final 类的任何特性。")])])])])]),t._v(" "),s("li",[s("p",[t._v("abstract 修饰符，用来创建抽象类和抽象方法。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("抽象类")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。")])]),t._v(" "),s("li",[s("p",[t._v("一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。")])]),t._v(" "),s("li",[s("p",[t._v("抽象类可以包含抽象方法和非抽象方法。")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("抽象方法")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。")])]),t._v(" "),s("li",[s("p",[t._v("抽象方法不能被声明成 final 和 static。")])]),t._v(" "),s("li",[s("p",[t._v("任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。")])]),t._v(" "),s("li",[s("p",[t._v("如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。")])]),t._v(" "),s("li",[s("p",[t._v("抽象方法的声明以分号结尾，例如："),s("strong",[t._v("public abstract sample();")]),t._v("。")])])])])])]),t._v(" "),s("li",[s("p",[t._v("synchronized 和 volatile 修饰符，主要用于线程的编程。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showDetails")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。")]),t._v(" "),s("p",[t._v("一个 volatile 对象引用可能是 null。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" active"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        active "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("active"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一行")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        active "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("transient 修饰符")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。")])]),t._v(" "),s("li",[s("p",[t._v("该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" limit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("55")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会持久化")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 持久化")]),t._v("\n")])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);